'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ = require('../../');

// Key to store the current table aligns in the state
var ALIGNS = 'current_table_aligns';

// Key to indicate that the current row is a header
var THEAD = 'next_row_is_header';

// Key to indicate the current column index
var COL = 'current_column';

/**
 * Serialize a table to HTML
 * @type {Serializer}
 */
var serializeTable = {
    serialize: (0, _.Serializer)().matchType(_.BLOCKS.TABLE).then(function (state) {
        var table = state.peek();
        var aligns = table.data.get('aligns');
        var rows = table.nodes;

        var headerText = state.setProp(ALIGNS, aligns).setProp(COL, 0).setProp(THEAD, true).serialize(rows.slice(0, 1));

        var bodyText = state.setProp(ALIGNS, aligns).setProp(COL, 0).serialize(rows.rest());

        return state.shift().write(['<table>', '<thead>', headerText + '</thead>', '<tbody>', bodyText + '</tbody>', '</table>', '\n'].join('\n'));
    })
};

/**
 * Serialize a row to HTML
 * @type {Serializer}
 */
var serializeRow = {
    serialize: (0, _.Serializer)().matchType(_.BLOCKS.TABLE_ROW).then(function (state) {
        var row = state.peek();
        var inner = state.setProp(COL, 0).serialize(row.nodes);

        return state.shift().write('<tr>\n' + inner + '</tr>\n');
    })
};

/**
 * Serialize a table cell to HTML
 * @type {Serializer}
 */
var serializeCell = {
    serialize: (0, _.Serializer)().matchType(_.BLOCKS.TABLE_CELL).then(function (state) {
        var cell = state.peek();
        var isHead = state.getProp(THEAD);
        var aligns = state.getProp(ALIGNS);
        var column = state.getProp(COL);
        var cellAlign = aligns[column];

        var containOneParagraph = cell.nodes.size === 1 && cell.nodes.first().type === _.BLOCKS.PARAGRAPH;

        var inner = state.serialize(containOneParagraph ? cell.nodes.first().nodes : cell.nodes);

        var tag = isHead ? 'th' : 'td';
        var style = cellAlign ? ' style="text-align:' + cellAlign + '"' : '';

        return state.shift().setProp(COL, column + 1).write('<' + tag + style + '>' + inner + '</' + tag + '>\n');
    })
};

exports.default = {
    table: serializeTable,
    row: serializeRow,
    cell: serializeCell
};