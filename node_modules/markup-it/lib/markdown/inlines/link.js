'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _immutable = require('immutable');

var _ = require('../../');

var _inline = require('../re/inline');

var _inline2 = _interopRequireDefault(_inline);

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Serialize a link to markdown
 * @type {Serializer}
 */
var serialize = (0, _.Serializer)().matchType(_.INLINES.LINK).then(function (state) {
    var node = state.peek();
    var data = node.data,
        nodes = node.nodes;

    var inner = state.use('inline').serialize(nodes);

    // Escape the href
    var href = utils.escapeURL(data.get('href', ''));

    // Escape the title
    var title = utils.escape(data.get('title', ''));

    if (title) {
        title = title ? ' "' + title + '"' : '';
    }

    var output = '[' + inner + '](' + href + title + ')';

    return state.shift().write(output);
});

/**
 * Deserialize a classic image like:
 *  ![Hello](test.png)
 * @type {Deserializer}
 */
var deserializeNormal = (0, _.Deserializer)().matchRegExp(_inline2.default.link, function (state, match) {
    var inner = match[1];
    var nodes = state.use('inline')
    // Signal to children that we are in a link
    .setProp('link', state.depth).deserialize(inner);

    var data = (0, _immutable.Map)({
        href: utils.unescapeURL(match[2]),
        title: match[3] ? utils.unescape(match[3]) : undefined
    }).filter(Boolean);

    var node = _.Inline.create({
        type: _.INLINES.LINK,
        nodes: nodes,
        data: data
    });

    return state.push(node);
});

/**
 * Deserialize an url:
 *  https://www.google.fr
 * @type {Deserializer}
 */
var deserializeUrl = (0, _.Deserializer)().matchRegExp(_inline2.default.url, function (state, match) {
    // Already inside a link?
    if (state.getProp('link')) {
        return undefined;
    }

    var href = utils.unescapeURL(match[1]);

    var node = _.Inline.create({
        type: _.INLINES.LINK,
        nodes: [_.Text.create(href)],
        data: { href: href }
    });

    return state.push(node);
});

/**
 * Deserialize an url with < and >:
 *  <samy@gitbook.com>
 * @type {Deserializer}
 */
var deserializeAutolink = (0, _.Deserializer)().matchRegExp(_inline2.default.autolink, function (state, match) {
    // Already inside a link?
    if (state.getProp('link')) {
        return undefined;
    }

    var text = match[1];
    var href = void 0;

    if (match[2] === '@') {
        href = 'mailto:' + text;
    } else {
        href = text;
    }

    var node = _.Inline.create({
        type: _.INLINES.LINK,
        nodes: [_.Text.create(text)],
        data: { href: href }
    });

    return state.push(node);
});

/**
 * Deserialize a reference link:
 *  nolink: [1]
 * @type {Deserializer}
 */
var deserializeRef = (0, _.Deserializer)().matchRegExp([_inline2.default.reflink, _inline2.default.nolink], function (state, match) {
    // Already inside a link?
    if (state.getProp('link')) {
        return undefined;
    }

    var refID = match[2] || match[1];
    var inner = match[1];
    var data = utils.resolveRef(state, refID);

    if (!data) {
        return undefined;
    }

    var nodes = state.use('inline').setProp('link', state.depth).deserialize(inner);

    var node = _.Inline.create({
        type: _.INLINES.LINK,
        nodes: nodes,
        data: data
    });

    return state.push(node);
});

/**
 * Deserialize a reference.
 * @type {Deserializer}
 */
var deserializeReffn = (0, _.Deserializer)().matchRegExp(_inline2.default.reffn, function (state, match) {
    // Already inside a link?
    if (state.getProp('link')) {
        return undefined;
    }

    var refID = match[1];
    var data = utils.resolveRef(state, refID);

    if (!data) {
        return undefined;
    }

    var node = _.Inline.create({
        type: _.INLINES.LINK,
        nodes: [_.Text.createFromString(refID)],
        data: data
    });

    return state.push(node);
});

var deserialize = (0, _.Deserializer)().use([deserializeNormal, deserializeUrl, deserializeAutolink, deserializeReffn, deserializeRef]);

exports.default = { serialize: serialize, deserialize: deserialize };