'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ltrim = require('ltrim');

var _ltrim2 = _interopRequireDefault(_ltrim);

var _rtrim = require('rtrim');

var _rtrim2 = _interopRequireDefault(_rtrim);

var _ = require('../../');

var _inline = require('../re/inline');

var _inline2 = _interopRequireDefault(_inline);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Normalize some TeX content
 * @param {String} content
 * @return {String}
 */
function normalizeTeX(content) {
    return (0, _rtrim2.default)((0, _ltrim2.default)(content, '\n'), '\n');
}

/**
 * Serialize a math node to markdown
 * @type {Serializer}
 */
var serialize = (0, _.Serializer)().matchType(_.INLINES.MATH).then(function (state) {
    var node = state.peek();
    var data = node.data;

    var formula = data.get('formula');

    formula = normalizeTeX(formula);

    var output = '$$' + formula + '$$';

    return state.shift().write(output);
});

/**
 * Deserialize a math
 * @type {Deserializer}
 */
var deserialize = (0, _.Deserializer)().matchRegExp(_inline2.default.math, function (state, match) {
    var formula = match[1].trim();

    if (state.getProp('math') === false || !formula) {
        return undefined;
    }

    var node = _.Inline.create({
        type: _.INLINES.MATH,
        isVoid: true,
        data: {
            formula: formula
        }
    });

    return state.push(node);
});

exports.default = { serialize: serialize, deserialize: deserialize };