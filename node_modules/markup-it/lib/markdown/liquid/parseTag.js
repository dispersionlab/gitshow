'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _immutable = require('immutable');

var _lexical = require('./lexical');

var _lexical2 = _interopRequireDefault(_lexical);

var _escape = require('./escape');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Parse a literal value.
 * @param  {String} str
 * @return {String|Number|Boolean}
 */
function parseLiteral(str) {
    if (str.match(_lexical2.default.numberLine)) {
        return Number(str);
    } else if (str.match(_lexical2.default.boolLine)) {
        return str.toLowerCase() === 'true';
    } else if (str.match(_lexical2.default.quotedLine)) {
        return (0, _escape.unescape)(str.slice(1, -1));
    }

    return str;
}

/**
 * Parse data of the block.
 * @param  {String} text
 * @return {Map} props
 */
function parseData(inputText) {
    var match = void 0;
    var args = 0;
    var result = {};

    var text = inputText;
    do {
        match = text.match(_lexical2.default.prop);

        if (match) {
            if (match[2]) {
                result[match[2]] = parseLiteral(match[3]);
            } else {
                result[args] = parseLiteral(match[1]);
                args += 1;
            }

            text = text.slice(match[0].length);
        }
    } while (match);

    return (0, _immutable.Map)(result);
}

/**
 * Parse the inner text of a tag.
 * @param  {String} text
 * @return {Object | Null} { tag: String, data: Map }
 */
function parseTag(text) {
    var match = text.match(_lexical2.default.tagLine);

    if (!match) {
        return null;
    }

    return {
        tag: match[1],
        data: parseData(match[2])
    };
}

exports.default = parseTag;