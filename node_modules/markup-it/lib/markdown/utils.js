'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.wrapInline = exports.resolveRef = exports.replace = exports.unescapeURL = exports.escapeURL = exports.unescape = exports.escape = undefined;

var _entities = require('entities');

var _entities2 = _interopRequireDefault(_entities);

var _immutable = require('immutable');

var _isAbsoluteUrl = require('is-absolute-url');

var _isAbsoluteUrl2 = _interopRequireDefault(_isAbsoluteUrl);

var _escape = require('../utils/escape');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Replacements for Markdown escaping
// See http://spec.commonmark.org/0.15/#backslash-escapes
var REPLACEMENTS_ESCAPE = (0, _immutable.Map)([['*', '\\*'], ['#', '\\#'],
// GitHub doesn't escape slashes, and render the backslash in that cause
// [ '/', '\\/' ],
['(', '\\('], [')', '\\)'], ['[', '\\['], [']', '\\]'], ['`', '\\`'], ['<', '&lt;'], ['>', '&gt;'], ['_', '\\_'], ['|', '\\|']]);
// We do not escape all characters, but we want to unescape them all.
var REPLACEMENTS_UNESCAPE = REPLACEMENTS_ESCAPE.merge({
    ' ': '\\ ',
    '+': '\\+'
});

// Replacements for escaping urls (links and images)
var URL_REPLACEMENTS_UNESCAPE = REPLACEMENTS_UNESCAPE.merge({
    ' ': '%20'
});
var URL_REPLACEMENTS_ESCAPE = (0, _immutable.Map)([[' ', '%20'], ['(', '%28'], [')', '%29']]);

/**
 * Escape markdown syntax
 * We escape only basic XML entities
 *
 * @param {String} str
 * @param {Boolean} escapeXML
 * @return {String}
 */
function escape(inputStr, escapeXML) {
    var str = (0, _escape.escapeWith)(REPLACEMENTS_ESCAPE, inputStr);
    return escapeXML === false ? str : _entities2.default.encodeXML(str);
}

/**
 * Unescape markdown syntax
 * We unescape all entities (HTML + XML)
 *
 * @param {String} str
 * @return {String}
 */
function unescape(str) {
    return _entities2.default.decodeHTML((0, _escape.unescapeWith)(REPLACEMENTS_UNESCAPE, str));
}

/**
 * Escape an url
 *
 * @param {String} str
 * @return {String}
 */
function escapeURL(str) {
    return (0, _escape.escapeWith)(URL_REPLACEMENTS_ESCAPE, str);
}

/**
 * URI decode and unescape an url
 *
 * @param {String} str
 * @return {String}
 */
function unescapeURL(str) {
    var decoded = void 0;
    try {
        // If URL is absolute, we shouldn't try to decode it
        // since it doesn't represent a file path but rather a static resource
        decoded = (0, _isAbsoluteUrl2.default)(str) ? str : decodeURI(str);
    } catch (e) {
        if (!(e instanceof URIError)) {
            throw e;
        } else {
            decoded = str;
        }
    }

    return (0, _escape.unescapeWith)(URL_REPLACEMENTS_UNESCAPE, decoded);
}

/**
 * Create a function to replace content in a regex
 * @param  {RegEx} regex
 * @param  {String} opt
 * @return {Function(String, String)}
 */
function replace(regex) {
    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var source = regex.source;


    return function self(name, val) {
        if (!name) return new RegExp(source, opt);
        var _val$source = val.source,
            valSource = _val$source === undefined ? val : _val$source;

        valSource = valSource.replace(/(^|[^[])\^/g, '$1');
        source = source.replace(name, valSource);
        return self;
    };
}

/**
 * Resolve a reference (links and images) in a state.
 * @param  {State} state
 * @param  {String} refID
 * @return {Object} props?
 */
function resolveRef(state, refID) {
    var refs = state.getProp('refs');

    var normRefID = refID.replace(/\s+/g, ' ').toLowerCase();

    var data = refs.get(normRefID);
    if (!data) {
        return undefined;
    }

    return (0, _immutable.Map)(data).filter(Boolean);
}

/**
 * Wrap inline content with the provided characters.
 * e.g wrapInline('bold content', '**')
 * @param {String} str
 * @param {String} chars
 */
function wrapInline(str, chars) {
    return str.replace(/^\s*/, function (spaces) {
        return '' + spaces + chars;
    }).replace(/\s*$/, function (spaces) {
        return '' + chars + spaces;
    });
}

exports.escape = escape;
exports.unescape = unescape;
exports.escapeURL = escapeURL;
exports.unescapeURL = unescapeURL;
exports.replace = replace;
exports.resolveRef = resolveRef;
exports.wrapInline = wrapInline;