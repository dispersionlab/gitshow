'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _trimNewlines = require('trim-newlines');

var _trimNewlines2 = _interopRequireDefault(_trimNewlines);

var _ = require('../../');

var _deserializeCodeLines = require('../../utils/deserializeCodeLines');

var _deserializeCodeLines2 = _interopRequireDefault(_deserializeCodeLines);

var _block = require('../re/block');

var _block2 = _interopRequireDefault(_block);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Serialize a code block to markdown
 * @type {Serializer}
 */
var serialize = (0, _.Serializer)().matchType(_.BLOCKS.CODE).then(function (state) {
    var node = state.peek();
    var nodes = node.nodes,
        data = node.data;

    // Escape the syntax
    // http://spec.commonmark.org/0.15/#example-234

    var syntax = (0, _utils.escape)(data.get('syntax') || '');

    // Get inner content and number of fences
    var innerText = nodes.map(function (line) {
        return line.text;
    }).join('\n');
    var hasFences = innerText.indexOf('`') >= 0;

    var output = void 0;

    // Use fences if syntax is set
    if (!hasFences || syntax) {
        output = '```' + (syntax || '') + '\n' + innerText + '\n' + '```' + '\n\n';

        return state.shift().write(output);
    }

    output = nodes.map(function (_ref) {
        var text = _ref.text;

        if (!text.trim()) {
            return '';
        }
        return '    ' + text;
    }).join('\n') + '\n\n';

    return state.shift().write(output);
});

/**
 * Deserialize a code block to a node.
 * @type {Deserializer}
 */
var deserializeFences = (0, _.Deserializer)().matchRegExp(_block2.default.fences, function (state, match) {
    // Extract code block text, and trim empty lines
    var text = (0, _trimNewlines2.default)(match[3]);

    // Extract language syntax
    var data = void 0;
    if (match[2]) {
        data = {
            syntax: (0, _utils.unescape)(match[2].trim())
        };
    }

    // Split lines
    var nodes = (0, _deserializeCodeLines2.default)(text);

    var node = _.Block.create({
        type: _.BLOCKS.CODE,
        nodes: nodes,
        data: data
    });

    return state.push(node);
});

/**
 * Deserialize a code block to a node.
 * @type {Deserializer}
 */
var deserializeTabs = (0, _.Deserializer)().matchRegExp(_block2.default.code, function (state, match) {
    var inner = match[0];

    // Remove indentation
    inner = inner.replace(/^( {4}|\t)/gm, '');

    // No pedantic mode
    inner = inner.replace(/\n+$/, '');

    // Split lines
    var nodes = (0, _deserializeCodeLines2.default)(inner);

    var node = _.Block.create({
        type: _.BLOCKS.CODE,
        nodes: nodes
    });

    return state.push(node);
});

var deserialize = (0, _.Deserializer)().use([deserializeFences, deserializeTabs]);

exports.default = { serialize: serialize, deserialize: deserialize };