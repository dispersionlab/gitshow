'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _ = require('../../');

var _block = require('../re/block');

var _block2 = _interopRequireDefault(_block);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Serialize a paragraph to markdown
 * @type {Serializer}
 */
var serialize = (0, _.Serializer)().matchType(_.BLOCKS.PARAGRAPH).then(function (state) {
    var node = state.peek();
    var inner = state.use('inline').setProp('hardlineBreak', true).serialize(node.nodes);

    return state.shift().write(inner + '\n\n');
});

/**
 * Deserialize a paragraph to a node.
 * @type {Deserializer}
 */
var deserialize = (0, _.Deserializer)().matchRegExp(_block2.default.paragraph, function (state, match) {
    var parentDepth = state.depth - 1;
    var isInBlockquote = state.getProp('blockquote') === parentDepth;
    var isInLooseList = state.getProp('looseList') === parentDepth;
    var isTop = state.depth === 2;

    if (!isTop && !isInBlockquote && !isInLooseList) {
        return undefined;
    }

    var text = collapseWhiteSpaces(match[1]);

    var newState = state.down({ text: text }).use('inline').lex();

    var nodes = newState.nodes;


    var node = _.Block.create({
        type: _.BLOCKS.PARAGRAPH,
        nodes: nodes
    });

    return newState.up().push(node);
});

/*
 * Collapse newlines and whitespaces into a single whitespace. But preserve
 * hardline breaks '··⏎'
 */
function collapseWhiteSpaces(text) {
    return text
    // Remove hardline breaks
    .split('  \n').map(function (part) {
        return part.trim().replace(/\s+/g, ' ');
    })
    // Restore hardline breaks
    .join('  \n').trim();
}

exports.default = { serialize: serialize, deserialize: deserialize };