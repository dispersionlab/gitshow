'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _document$BLOCKS$BLOC;

var _objectValues = require('object-values');

var _objectValues2 = _interopRequireDefault(_objectValues);

var _blocks = require('./blocks');

var _blocks2 = _interopRequireDefault(_blocks);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ALL_BLOCKS = (0, _objectValues2.default)(_blocks2.default);

/**
 * Dictionary of all container block types, and the set block types they accept as children.
 * The first value of each set is the default block type.
 *
 * @type {Map<String:Array>}
 */

exports.default = (_document$BLOCKS$BLOC = {
    // We use Document.object instead of its type
    document: [_blocks2.default.PARAGRAPH].concat(_toConsumableArray(ALL_BLOCKS))
}, _defineProperty(_document$BLOCKS$BLOC, _blocks2.default.BLOCKQUOTE, [_blocks2.default.TEXT].concat(_toConsumableArray(ALL_BLOCKS))), _defineProperty(_document$BLOCKS$BLOC, _blocks2.default.TABLE, [_blocks2.default.TABLE_ROW]), _defineProperty(_document$BLOCKS$BLOC, _blocks2.default.TABLE_ROW, [_blocks2.default.TABLE_CELL]), _defineProperty(_document$BLOCKS$BLOC, _blocks2.default.TABLE_CELL, [_blocks2.default.PARAGRAPH].concat(_toConsumableArray(ALL_BLOCKS))), _defineProperty(_document$BLOCKS$BLOC, _blocks2.default.LIST_ITEM, [_blocks2.default.TEXT].concat(_toConsumableArray(ALL_BLOCKS))), _defineProperty(_document$BLOCKS$BLOC, _blocks2.default.OL_LIST, [_blocks2.default.LIST_ITEM]), _defineProperty(_document$BLOCKS$BLOC, _blocks2.default.UL_LIST, [_blocks2.default.LIST_ITEM]), _defineProperty(_document$BLOCKS$BLOC, _blocks2.default.CODE, [_blocks2.default.CODE_LINE]), _document$BLOCKS$BLOC);